services:
  # Database with pgvector for embeddings
  postgres:
    image: pgvector/pgvector:pg16
    shm_size: 1g
    user: postgres
    environment:
      POSTGRES_DB: email_rag
      POSTGRES_USER: email_user
      POSTGRES_PASSWORD: email_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: |
      postgres 
      -c wal_level=logical
      -c max_wal_senders=10 
      -c max_replication_slots=5 
      -c hot_standby=on 
      -c hot_standby_feedback=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U email_user -d email_rag"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # IMAP sync service - lightweight, handles email ingestion only
  imap-sync:
    build: ./services/imap-sync
    environment:
      DATABASE_URL: postgresql://email_user:email_pass@postgres:5432/email_rag?sslmode=disable
      EMAIL_STORE_PATH: /var/lib/email-store
      # User-configurable IMAP settings
      IMAP_HOST: ${IMAP_HOST:?IMAP_HOST is required}
      IMAP_PORT: ${IMAP_PORT:-993}
      IMAP_USER: ${IMAP_USER:?IMAP_USER is required}
      IMAP_PASS: ${IMAP_PASS:?IMAP_PASS is required}
      IMAP_TLS: ${IMAP_TLS:-true}
      SYNC_INTERVAL: ${SYNC_INTERVAL:-300s}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - email_store:/var/lib/email-store
    restart: unless-stopped

  # Email processing worker - Background worker for email cleaning and parsing
  email-processor-worker:
    build: 
      context: ./services/email-processor
      dockerfile: Dockerfile.python-only
    command: ["python", "worker.py"]
    environment:
      DATABASE_URL: postgresql://email_user:email_pass@postgres:5432/email_rag
      POLL_INTERVAL: ${POLL_INTERVAL:-30}
      BATCH_SIZE: ${BATCH_SIZE:-50}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAILBOX_FILTER: ${MAILBOX_FILTER:-INBOX}
    volumes:
      - ./services/email-processor:/app
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Unstructured.io service - For text processing and embeddings
  unstructured:
    image: downloads.unstructured.io/unstructured-io/unstructured:latest
    environment:
      # Override offline mode to allow model downloads
      HF_HUB_OFFLINE: "false"
    # Resource limits for Unstructured processing  
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    # Keep container running for library access
    command: ["tail", "-f", "/dev/null"]

volumes:
  postgres_data:
  email_store:   # Raw email storage for go-imap-sql

networks:
  default:
    name: email-rag-network